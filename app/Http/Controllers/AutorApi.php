<?php

/**
 * Livraria Virtual
 * Manipulação de livros e suas dependências 
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class AutorApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation addAutor
     *
     * Adiciona um novo autor.
     *
     *
     * @return Http response
     */
    public function addAutor()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling addAutor');
        }
        $body = $input['body'];


        return response('How about implementing addAutor as a post method ?');
    }
    /**
     * Operation getAutores
     *
     * Busca autores do armazenamento.
     *
     *
     * @return Http response
     */
    public function getAutores()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getAutores as a get method ?');
    }
    /**
     * Operation deleteAutor
     *
     * Remoção de um autor.
     *
     * @param int $id identificador do autor que será removido (required)
     *
     * @return Http response
     */
    public function deleteAutor($id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteAutor as a delete method ?');
    }
    /**
     * Operation getAutorById
     *
     * Busca autor por id.
     *
     * @param int $id identificador do autor de retorno (required)
     *
     * @return Http response
     */
    public function getAutorById($id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getAutorById as a get method ?');
    }
    /**
     * Operation updateAutor
     *
     * Atualização de um autor.
     *
     * @param int $id identificador do autor que será alterado (required)
     *
     * @return Http response
     */
    public function updateAutor($id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing updateAutor as a put method ?');
    }
}
